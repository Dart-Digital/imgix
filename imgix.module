<?php

/**
 * @file
 * Exposes global functionality for creating Imgix styles.
 */

/**
 * Imgix style constant for user presets in the database.
 */
define('IMGIX_STORAGE_NORMAL', 1);

/**
 * Imgix style constant for user presets that override module-defined presets.
 */
define('IMGIX_STORAGE_OVERRIDE', 2);

/**
 * Imgix style constant for module-defined presets in code.
 */
define('IMGIX_STORAGE_DEFAULT', 4);

/**
 * Imgix style constant to represent an editable preset.
 */
define('IMGIX_STORAGE_EDITABLE', IMGIX_STORAGE_NORMAL | IMGIX_STORAGE_OVERRIDE);

/**
 * Imgix style constant to represent any module-based preset.
 */
define('IMGIX_STORAGE_MODULE', IMGIX_STORAGE_OVERRIDE | IMGIX_STORAGE_DEFAULT);

// Load all Field module hooks for Image.
require_once module_load_include('inc', 'imgix', 'imgix.formatter');

/**
 * Implements hook_help().
 */
function imgix_help($path, $arg) {
  switch ($path) {
    case 'admin/config/media/imgix-styles':
      return '<p>' . t('Imgix styles are sets of configuration for the Imgix field formatter.') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function imgix_menu() {
  $items = array();

  $items['admin/config/media/imgix-styles'] = array(
    'title' => 'Imgix styles',
    'description' => 'Configure styles that can be used for the Imgix field formatter.',
    'page callback' => 'imgix_style_list',
    'access arguments' => array('administer imgix styles'),
    'file' => 'imgix.admin.inc',
  );
  $items['admin/config/media/imgix-styles/list'] = array(
    'title' => 'List',
    'description' => 'List the current Imgix styles on the site.',
    'page callback' => 'imgix_style_list',
    'access arguments' => array('administer imgix styles'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
    'file' => 'imgix.admin.inc',
  );
  $items['admin/config/media/imgix-styles/add'] = array(
    'title' => 'Add style',
    'description' => 'Add a new Imgix style.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imgix_style_add_form'),
    'access arguments' => array('administer imgix styles'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 2,
    'file' => 'imgix.admin.inc',
  );
  $items['admin/config/media/imgix-styles/edit/%imgix_style'] = array(
    'title' => 'Edit style',
    'description' => 'Configure an Imgix style.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imgix_style_form', 5),
    'access arguments' => array('administer imgix styles'),
    'file' => 'imgix.admin.inc',
  );
  $items['admin/config/media/imgix-styles/delete/%imgix_style'] = array(
    'title' => 'Delete style',
    'description' => 'Delete an Imgix style.',
    'load arguments' => array(NULL, (string) IMGIX_STORAGE_NORMAL),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imgix_style_delete_form', 5),
    'access arguments' => array('administer imgix styles'),
    'file' => 'imgix.admin.inc',
  );
  $items['admin/config/media/imgix-styles/revert/%imgix_style'] = array(
    'title' => 'Revert style',
    'description' => 'Revert an Imgix style.',
    'load arguments' => array(NULL, (string) IMGIX_STORAGE_OVERRIDE),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imgix_style_revert_form', 5),
    'access arguments' => array('administer imgix styles'),
    'file' => 'imgix.admin.inc',
  );

  $items['admin/config/media/imgix-styles/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure Imgix settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imgix_settings_form'),
    'access arguments' => array('administer imgix styles'),
    'file' => 'imgix.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function imgix_theme() {
  return array(
    // Theme functions in imgix.module.
    'imgix' => array(
      'variables' => array(
        'style_name' => NULL,
        'path' => NULL,
        'fluid' => TRUE,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
    ),

    'imgix_style' => array(
      'variables' => array(
        'style_name' => NULL,
        'path' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
    ),

    // Theme functions in imgix.admin.inc.
    'imgix_style_list' => array(
      'variables' => array('styles' => NULL),
    ),
    'imgix_style_preview' => array(
      'variables' => array('style' => NULL),
    ),

    // Theme functions in imgix.formatter.inc.
    'imgix_formatter' => array(
      'variables' => array('item' => NULL, 'path' => NULL, 'imgix_style' => NULL),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function imgix_permission() {
  return array(
    'administer imgix styles' => array(
      'title' => t('Administer Imgix styles'),
      'description' => t('Create and modify styles for the Imgix field formatter.'),
    ),
  );
}

/**
 * Implements hook_image_default_styles().
 */
function imgix_imgix_default_styles() {
  $styles = array();

  $styles['thumbnail'] = array(
    'label' => 'Thumbnail (100x100)',
    'configuration' => array(
      'w' => 100,
      'h' => 100,
      'upscale' => 1,
    ),
  );

  $styles['medium'] = array(
    'label' => 'Medium (220x220)',
    'configuration' => array(
      'w' => 220,
      'h' => 220,
      'upscale' => 1,
    ),
  );

  $styles['large'] = array(
    'label' => 'Large (480x480)',
    'configuration' => array(
      'w' => 480,
      'h' => 480,
      'upscale' => 0,
    ),
  );

  return $styles;
}

/**
 * Implements hook_imgix_style_save().
 */
function imgix_imgix_style_save($style) {
  if (isset($style['old_name']) && $style['old_name'] != $style['name']) {
    $instances = field_read_instances();
    // Loop through all fields searching for image fields.
    foreach ($instances as $instance) {
      if ($instance['widget']['module'] == 'image') {
        $instance_changed = FALSE;
        foreach ($instance['display'] as $view_mode => $display) {
          // Check if the formatter involves an Imgix style.
          if ($display['type'] == 'imgix' && $display['settings']['imgix_style'] == $style['old_name']) {
            // Update display information for any instance using the Imgix
            // style that was just deleted.
            $instance['display'][$view_mode]['settings']['imgix_style'] = $style['name'];
            $instance_changed = TRUE;
          }
        }
        if ($instance['widget']['settings']['preview_imgix_style'] == $style['old_name']) {
          $instance['widget']['settings']['preview_imgix_style'] = $style['name'];
          $instance_changed = TRUE;
        }
        if ($instance_changed) {
          field_update_instance($instance);
        }
      }
    }
  }
}

/**
 * Implements hook_imgix_style_delete().
 */
function imgix_imgix_style_delete($style) {
  imgix_imgix_style_save($style);
}

/**
 * Gets an array of all styles and their settings.
 *
 * @return
 *   An array of styles keyed by the imgix style ID (isid).
 * @see imgix_style_load()
 */
function imgix_styles() {
  $styles = &drupal_static(__FUNCTION__);

  // Grab from cache or build the array.
  if (!isset($styles)) {
    if ($cache = cache_get('imgix_styles', 'cache')) {
      $styles = $cache->data;
    }
    else {
      $styles = array();

      // Select the module-defined styles.
      foreach (module_implements('imgix_default_styles') as $module) {
        $module_styles = module_invoke($module, 'imgix_default_styles');
        foreach ($module_styles as $style_name => $style) {
          $style['name'] = $style_name;
          $style['label'] = empty($style['label']) ? $style_name : $style['label'];
          $style['module'] = $module;
          $style['storage'] = IMGIX_STORAGE_DEFAULT;
          $styles[$style_name] = $style;
        }
      }

      // Select all the user-defined styles.
      $user_styles = db_select('imgix_styles', NULL, array('fetch' => PDO::FETCH_ASSOC))
        ->fields('imgix_styles')
        ->orderBy('name')
        ->execute()
        ->fetchAllAssoc('name', PDO::FETCH_ASSOC);

      // Allow the user styles to override the module styles.
      foreach ($user_styles as $style_name => $style) {
        $style['module'] = NULL;
        $style['storage'] = IMGIX_STORAGE_NORMAL;
        if (isset($styles[$style_name]['module'])) {
          $style['module'] = $styles[$style_name]['module'];
          $style['storage'] = IMGIX_STORAGE_OVERRIDE;
        }
        $style['configuration'] = unserialize($style['configuration']);
        $styles[$style_name] = $style;
      }

      drupal_alter('imgix_styles', $styles);
      cache_set('imgix_styles', $styles);
    }
  }

  return $styles;
}

/**
 * Loads a style by style name or ID.
 *
 * May be used as a loader for menu items.
 *
 * @param $name
 *   The name of the style.
 * @param $isid
 *   Optional. The numeric id of a style if the name is not known.
 * @param $include
 *   If set, this loader will restrict to a specific type of Imgix style, may be
 *   one of the defined Imgix style storage constants.
 *
 * @return
 *   An Imgix style array containing the following keys:
 *   - "isid": The unique Imgix style ID.
 *   - "name": The unique Imgix style name.
 *   - "configuration": An array of Imgix configuration within this style.
 *   If the imgix style name or ID is not valid, an empty array is returned.
 */
function imgix_style_load($name = NULL, $isid = NULL, $include = NULL) {
  $styles = imgix_styles();

  // If retrieving by name.
  if (isset($name) && isset($styles[$name])) {
    $style = $styles[$name];
  }

  // If retrieving by imgix style id.
  if (!isset($name) && isset($isid)) {
    foreach ($styles as $name => $database_style) {
      if (isset($database_style['isid']) && $database_style['isid'] == $isid) {
        $style = $database_style;
        break;
      }
    }
  }

  // Restrict to the specific type of flag. This bitwise operation basically
  // states "if the storage is X, then allow".
  if (isset($style) && (!isset($include) || ($style['storage'] & (int) $include))) {
    return $style;
  }

  // Otherwise the style was not found.
  return FALSE;
}

/**
 * Saves an Imgix style.
 *
 * @param array $style
 *   An Imgix style array containing:
 *   - name: A unique name for the style.
 *   - isid: (optional) An Imgix style ID.
 *
 * @return array
 *   An Imgix style array containing:
 *   - name: An unique name for the style.
 *   - old_name: The original name for the style.
 *   - isid: An Imgix style ID.
 *   - is_new: TRUE if this is a new style, and FALSE if it is an existing
 *     style.
 */
function imgix_style_save($style) {
  if (isset($style['isid']) && is_numeric($style['isid'])) {
    // Load the existing style to make sure we account for renamed styles.
    $old_style = imgix_style_load(NULL, $style['isid']);
    imgix_style_flush($old_style);
    drupal_write_record('imgix_styles', $style, 'isid');
    if ($old_style['name'] != $style['name']) {
      $style['old_name'] = $old_style['name'];
    }
  }
  else {
    // Add a default label when not given.
    if (empty($style['label'])) {
      $style['label'] = $style['name'];
    }
    drupal_write_record('imgix_styles', $style);
    $style['is_new'] = TRUE;
  }

  // Let other modules update as necessary on save.
  module_invoke_all('imgix_style_save', $style);

  // Clear all caches and flush.
  imgix_style_flush($style);

  return $style;
}

/**
 * Deletes an Imgix style.
 *
 * @param $style
 *   An Imgix style array.
 * @param $replacement_style_name
 *   (optional) When deleting a style, specify a replacement style name so
 *   that existing settings (if any) may be converted to a new style.
 *
 * @return
 *   TRUE on success.
 */
function imgix_style_delete($style, $replacement_style_name = '') {
  imgix_style_flush($style);

  db_delete('imgix_styles')->condition('isid', $style['isid'])->execute();

  // Let other modules update as necessary on save.
  $style['old_name'] = $style['name'];
  $style['name'] = $replacement_style_name;
  module_invoke_all('imgix_style_delete', $style);

  return TRUE;
}

/**
 * Gets an array of Imgix styles suitable for using as select list options.
 *
 * @param $include_empty
 *   If TRUE a <none> option will be inserted in the options array.
 * @param $output
 *   Optional flag determining how the options will be sanitized on output.
 *   Leave this at the default (CHECK_PLAIN) if you are using the output of
 *   this function directly in an HTML context, such as for checkbox or radio
 *   button labels, and do not plan to sanitize it on your own. If using the
 *   output of this function as select list options (its primary use case), you
 *   should instead set this flag to PASS_THROUGH to avoid double-escaping of
 *   the output (the form API sanitizes select list options by default).
 *
 * @return
 *   Array of Imgix styles with the machine name as key and the label as value.
 */
function imgix_style_options($include_empty = TRUE, $output = CHECK_PLAIN) {
  $styles = imgix_styles();
  $options = array();
  if ($include_empty && !empty($styles)) {
    $options[''] = t('<none>');
  }
  foreach ($styles as $name => $style) {
    $options[$name] = ($output == PASS_THROUGH) ? $style['label'] : check_plain($style['label']);
  }

  if (empty($options)) {
    $options[''] = t('No defined styles');
  }
  return $options;
}

/**
 * Returns the Imgix URL for a style and image path.
 *
 * @param $style_name
 *   The name of the style to be used with this image.
 * @param $path
 *   The path to the image.
 *
 * @return
 *   The absolute URL to the Imgix URL with the configuration options applied.
 *   Suitable for use in an <img> tag.
 */
function imgix_style_url($style_name, $path) {

  $style = imgix_style_load($style_name);

  // If the style can't be loaded then return the original path.
  if (empty($style)) {
    return $path;
  }

  // If the scheme is not public then return the original path.
  if (file_uri_scheme($path) != 'public') {
    return $path;
  }

  $imgix_url = variable_get('imgix_url', '');

  // If the Imgix URL hasn't been set then return the original path.
  if (empty($imgix_url)) {
    return $path;
  }

  $query = array();
  foreach ($style['configuration'] as $key => $value) {
    if (empty($value)) {
      continue;
    }
    if (is_array($value)) {
      $value = array_filter($value);
      $value = implode(',', $value);
    }
    $query[] = "$key=$value";
  }
  $file_url = $imgix_url . file_uri_target($path) . '?' . implode('&', $query);

  return $file_url;
}

/**
 * Saves a default Imgix style to the database.
 *
 * @param style
 *   An Imgix style array provided by a module.
 *
 * @return
 *   An Imgix style array. The returned style array will include the new 'isid'
 *   assigned to the style.
 */
function imgix_default_style_save($style) {
  $style = imgix_style_save($style);
  return $style;
}

/**
 * Reverts the changes made by users to a default Imgix style.
 *
 * @param style
 *   An Imgix style array.
 * @return
 *   Boolean TRUE if the operation succeeded.
 */
function imgix_default_style_revert($style) {

  imgix_style_flush($style);

  db_delete('imgix_styles')->condition('isid', $style['isid'])->execute();

  return TRUE;
}

/**
 * Returns HTML for an image using a specific Imgix style.
 *
 * @param $variables
 *   An associative array containing:
 *   - style_name: The name of the style to be used to alter the original image.
 *   - path: The path of the image file relative to the Drupal files directory.
 *     This function does not work with images outside the files directory nor
 *     with remotely hosted images. This should be in a format such as
 *     'images/image.jpg', or using a stream wrapper such as
 *     'public://images/image.jpg'.
 *   - width: The width of the source image (if known).
 *   - height: The height of the source image (if known).
 *   - alt: The alternative text for text-based browsers.
 *   - title: The title text is displayed when the image is hovered in some
 *     popular browsers.
 *   - attributes: Associative array of attributes to be placed in the img tag.
 *
 * @ingroup themeable
 */
function theme_imgix_style($variables) {
  $style = imgix_style_load($variables['style_name']);

  // Determine the dimensions of the styled image.
  $dimensions = array(
    'width' => $variables['width'],
    'height' => $variables['height'],
  );

  unset($variables['width']);
  unset($variables['height']);

  imgix_style_transform_dimensions($variables['style_name'], $dimensions);

  if (isset($dimensions['width'])) {
    $variables['width'] = $dimensions['width'];
  }

  if (isset($dimensions['height'])) {
    $variables['height'] = $dimensions['height'];
  }

  $variables['fluid'] = FALSE;

  if (!empty($style) && !empty($style['configuration']['fluid'])) {
    $variables['fluid'] = TRUE;
//    $variables['configuration'] = $style['configuration'];
  }

  // Determine the Imgix URL for the styled image.
  $variables['path'] = imgix_style_url($variables['style_name'], $variables['path']);
  return theme('imgix', $variables);
}

/**
 * Returns HTML for an imgix image.
 *
 * @param $variables
 *   An associative array containing:
 *   - path: Either the path of the image file (relative to base_path()) or a
 *     full URL.
 *   - width: The width of the image (if known).
 *   - height: The height of the image (if known).
 *   - alt: The alternative text for text-based browsers. HTML 4 and XHTML 1.0
 *     always require an alt attribute. The HTML 5 draft allows the alt
 *     attribute to be omitted in some cases. Therefore, this variable defaults
 *     to an empty string, but can be set to NULL for the attribute to be
 *     omitted. Usually, neither omission nor an empty string satisfies
 *     accessibility requirements, so it is strongly encouraged for code
 *     calling theme('image') to pass a meaningful value for this variable.
 *     - http://www.w3.org/TR/REC-html40/struct/objects.html#h-13.8
 *     - http://www.w3.org/TR/xhtml1/dtds.html
 *     - http://dev.w3.org/html5/spec/Overview.html#alt
 *   - title: The title text is displayed when the image is hovered in some
 *     popular browsers.
 *   - attributes: Associative array of attributes to be placed in the img tag.
 */
function theme_imgix($variables) {
  $attributes = $variables['attributes'];
  $src = $variables['path'];

  $output = '<img';

  if ($variables['fluid']) {
    drupal_add_js(libraries_get_path('imgix') . '/imgix.min.js');
    drupal_add_js(drupal_get_path('module', 'imgix') . '/imgix.js');

//    drupal_add_js(
//      array(
//        'imgix' => array(
//          'styles' => array(
//            $variables['style_name'] => array('fluidClass' => 'imgix-' . $variables['style_name']) + $variables['configuration'],
//          ),
//        ),
//      ),
//      'setting'
//    );

    $output .= ' data-src="' . $src . '"';
    $attributes['class'] = 'imgix-' . $variables['style_name'];
    $attributes['class'] = 'imgix-style-fluid';
  }
  else {
    $output .= ' src="' . $src . '"';
  }

  foreach (array('width', 'height', 'alt', 'title') as $key) {

    if (isset($variables[$key])) {
      $attributes[$key] = $variables[$key];
    }
  }

  $output .= drupal_attributes($attributes);
  $output .= ' />';
  return $output;
}

/**
 * Determines the dimensions of the styled image.
 *
 * Applies all of an image style's effects to $dimensions.
 *
 * @param $style_name
 *   The name of the style to be applied.
 * @param $dimensions
 *   Dimensions to be modified - an array with components width and height, in
 *   pixels.
 */
function imgix_style_transform_dimensions($style_name, array &$dimensions) {
  $style = imgix_style_load($style_name);

  if (!is_array($style)) {
    return;
  }

  $configuration = $style['configuration'];

  $original_height = $dimensions['height'];
  $original_width = $dimensions['width'];
  $original_aspect = $original_width / $original_height;

  $config_height = $configuration['h'];
  $config_width = $configuration['w'];

  // Unset image height and width. If we can't work it out below it's better
  // than putting the wrong ones on.
  unset($dimensions['width']);
  unset($dimensions['height']);


  if (!empty($config_width)) {
    $dimensions['width'] = $config_width;
  }

  if (!empty($config_height)) {
    $dimensions['height'] = $config_height;
  }

  // If either the width or the height is not set, we don't need to continue;
  if (empty($config_width) || empty($config_height)) {
    return;
  }

  $config_aspect = $config_width / $config_height;

  $fit = $configuration['fit'];

  switch ($fit) {
    case 'crop':
    case 'clamp':
    case 'facearea':
      $dimensions['width'] = $config_width;
      $dimensions['height'] = $config_height;
      break;

    case 'clip':
    case 'fill':
      if ($original_aspect < $config_aspect) {
        $dimensions['width'] = $config_width * $original_aspect;
        $dimensions['height'] = $config_width;
      }
      else {
        $dimensions['width'] = $config_width;
        $dimensions['height'] = $config_width / $original_aspect;
      }
      break;

    // @TODO: Add calculations for the rest of the 'fit' options.

  }

}

/**
 * Gets details about an image.
 *
 * This is a copy of the image_get_info function except this doesn't check if
 * the image has been uploaded.
 *
 * Drupal supports GIF, JPG and PNG file formats when used with the GD
 * toolkit, and may support others, depending on which toolkits are
 * installed.
 *
 * @param $filepath
 *   String specifying the path of the image file.
 * @param $toolkit
 *   An optional image toolkit name to override the default.
 *
 * @return
 *   FALSE, if the file could not be found or is not an image. Otherwise, a
 *   keyed array containing information about the image:
 *   - "width": Width, in pixels.
 *   - "height": Height, in pixels.
 *   - "extension": Commonly used file extension for the image.
 *   - "mime_type": MIME type ('image/jpeg', 'image/gif', 'image/png').
 *   - "file_size": File size in bytes.
 */
function imgix_get_info($filepath, $toolkit = FALSE) {
  $details = FALSE;

  if (!$toolkit) {
    $toolkit = image_get_toolkit();
  }
  if ($toolkit) {
    $image = new stdClass();
    $image->source = $filepath;
    $image->toolkit = $toolkit;
    $details = image_toolkit_invoke('get_info', $image);
  }

  return $details;
}

/**
 * Flushes caches.
 *
 * @param $style
 *   An image style array.
 */
function imgix_style_flush($style) {

  // Clear image style and effect caches.
  cache_clear_all('imgix_styles', 'cache');
  drupal_static_reset('imgix_styles');

  // Clear field caches so that formatters may be added for this style.
  field_info_cache_clear();
  drupal_theme_rebuild();

  // Clear page caches when flushing.
  if (module_exists('block')) {
    cache_clear_all('*', 'cache_block', TRUE);
  }
  cache_clear_all('*', 'cache_page', TRUE);
}
